pipeline{
    agent any

    tools {
        jdk 'java-17'
        maven 'maven'
    }

    environment {
        MAVEN_OPTS = '-Dnet.bytebuddy.experimental=true -XX:+EnableDynamicAgentLoading'
    }
    stages{
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ManojKRISHNAPPA/Calulator-springboot.git'
            }
        }

        stage('compile'){
            steps {
                sh 'mvn clean compile'
            }
        }

       stage('Unit Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests=true'
            }
        }

        stage('Generate Jacoco report') {
            steps {
                sh 'mvn jacoco:report'
            }
        }

        stage('Publish Jacoco report') {
            steps {
                jacoco execPattern: '**/target/jacoco.exec', classPattern: '**/target/classes', sourcePattern: '**/src/main/java', exclusionPattern: '', changeBuildStatus: true
            }
        }

        // stage('SonarQube - SAST'){
        //     steps{
        //         sh """
        //             mvn sonar:sonar \
        //             -Dsonar.projectKey=devsecops-calculator-project \
        //             -Dsonar.host.url=http://3.91.180.162:9000 \
        //             -Dsonar.login=2c9f32f18bb780589404f6d01b6924787ea468b3
        //         """
        //     }
        // }       
        stage('build && SonarQube analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    // Optionally use a Maven environment you've configured already
        
                        sh 'mvn clean package org.sonarsource.scanner.maven:sonar-maven-plugin:sonar'
                    
                }
            }
        }
        stage("Quality Gate") {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Vulnarabilties scan-OWASP'){
            parallel {
                stage('Dependency Check') {
                    steps {
                        sh 'mvn org.owasp:dependency-check-maven:check -Dformat=ALL'
                    }
                }

                stage('Trivy base image scan') {
                    steps {
                        sh 'bash trivy-docker-image-scan.sh'
                    }
                }

                stage('OPA conftest'){
                    steps {
                        sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy dockerfile-security.rego Dockerfile'
                    }
                }
            }
        }
    
        stage('Docker Build and Push') {
            steps {
                withDockerRegistry([credentialsId: "docker-hub", url: ""]) {
                sh 'printenv'
                sh 'docker build -t manojkrishnappa/calculator-app:""$GIT_COMMIT"" .'
                sh 'docker push manojkrishnappa/calculator-app:""$GIT_COMMIT""'
                }
            }
        }

    }   

}